name: Distribute Documentation

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  workflow_dispatch:
    inputs:
      ref:
        description: 'Tag or branch to build (e.g. v0.11.0)'
        required: true
        default: 'v0.11.0'
      promote_latest:
        description: 'Also update "latest" alias and default?'
        required: true
        type: boolean
        default: false

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          # When manually dispatched, checkout the requested ref, otherwise use the event ref
          ref: ${{ github.event_name == 'workflow_dispatch' && inputs.ref || github.ref }}
          fetch-depth: 0

      - name: Set up Python and MkDocs
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install MkDocs Material and mike
        run: pip install mkdocs-material mike

      - name: Build PHP API Documentation
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            phpdoc/phpdoc:3.1 \
            phpdoc -d /app -t /app/docs/api \
                   --ignore /app/adminer \
                   --ignore /app/docs
      - name: Ensure correct permissions on generated files
        run: sudo chmod -R 777 docs

      - name: Configure Git for Deployment
        env:
          SSH_DEPLOY_KEY: ${{ secrets.WEBSITE_DEPLOY_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_DEPLOY_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git remote add website git@github.com:zubzet/website.git

      - name: Determine ref context
        id: ctx
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if git rev-parse -q --verify "refs/tags/${{ inputs.ref }}" >/dev/null; then
              echo "REF_TYPE=tag" >> $GITHUB_ENV
              echo "REF_NAME=${{ inputs.ref }}" >> $GITHUB_ENV
            else
              echo "REF_TYPE=branch" >> $GITHUB_ENV
              echo "REF_NAME=${{ inputs.ref }}" >> $GITHUB_ENV
            fi
            echo "PROMOTE=${{ inputs.promote_latest }}" >> $GITHUB_ENV
          else
            echo "REF_TYPE=${{ github.ref_type }}" >> $GITHUB_ENV
            echo "REF_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
            # For normal tag pushes we DO promote latest
            if [ "${{ github.ref_type }}" = "tag" ]; then
              echo "PROMOTE=true" >> $GITHUB_ENV
            else
              echo "PROMOTE=false" >> $GITHUB_ENV
            fi
          fi

      - name: Deploy Documentation (versioned)
        run: |
          git fetch website gh-pages --depth=1 || true

          if [ "$REF_TYPE" = "tag" ]; then
            version="$REF_NAME" # e.g. v0.11.0
            if [ "$PROMOTE" = "true" ]; then
              mike deploy --update-aliases "$version" latest \
                --deploy-prefix docs -b gh-pages -r website -p
              mike set-default latest \
                --deploy-prefix docs -b gh-pages -r website -p
            else
              # just publish the old version without changing 'latest'
              mike deploy "$version" \
                --deploy-prefix docs -b gh-pages -r website -p
            fi
          else
            # main (or any branch via manual trigger) -> 'unstable'
            mike deploy unstable \
              --deploy-prefix docs -b gh-pages -r website -p
          fi